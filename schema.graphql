schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Game {
  description: String
  generations: Int!
  id: ID!
  pattern: String
  sizeX: Int!
  sizeY: Int!
}

type GameConnection {
  items: [Game]
  nextToken: String
}

type Mutation {
  createGame(input: CreateGameInput!): Game
  createPattern(input: CreatePatternInput!): Pattern
  createPatternRating(input: CreatePatternRatingInput!): PatternRating
  createUser(input: CreateUserInput!): User
  deleteGame(input: DeleteGameInput!): Game
  deletePattern(input: DeletePatternInput!): Pattern
  deletePatternRating(input: DeletePatternRatingInput!): PatternRating
  deleteUser(input: DeleteUserInput!): User
  updateGame(input: UpdateGameInput!): Game
  updatePattern(input: UpdatePatternInput!): Pattern
  updatePatternRating(input: UpdatePatternRatingInput!): PatternRating
  updateUser(input: UpdateUserInput!): User
}

type Pattern {
  author: String
  description: String
  heat: Int
  id: ID!
  locked: Boolean
  name: String!
  pattern: String!
  sizeX: Int!
  sizeY: Int!
  type: String
  year: Int
}

type PatternConnection {
  items: [Pattern]
  nextToken: String
}

type PatternRating {
  comment: String
  id: ID!
  rating: Int
  userId: String
}

type PatternRatingConnection {
  items: [PatternRating]
  nextToken: String
}

type Query {
  getGame(id: ID!): Game
  getPattern(id: ID!): Pattern
  getPatternRating(id: ID!): PatternRating
  getUser(id: ID!): User
  listGames(filter: TableGameFilterInput, limit: Int, nextToken: String): GameConnection
  listPatternRatings(filter: TablePatternRatingFilterInput, limit: Int, nextToken: String): PatternRatingConnection
  listPatterns(filter: TablePatternFilterInput, limit: Int, nextToken: String): PatternConnection
  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
}

type Subscription {
  onCreateGame(generations: Int, id: ID, pattern: String, sizeX: Int, sizeY: Int): Game @aws_subscribe(mutations : ["createGame"])
  onCreatePattern(author: String, description: String, id: ID, sizeX: Int, sizeY: Int): Pattern @aws_subscribe(mutations : ["createPattern"])
  onCreatePatternRating(comment: String, id: ID, rating: Int): PatternRating @aws_subscribe(mutations : ["createPatternRating"])
  onCreateUser(email: AWSEmail, id: ID, lastLogin: AWSDateTime, role: String, username: String): User @aws_subscribe(mutations : ["createUser"])
  onDeleteGame(generations: Int, id: ID, pattern: String, sizeX: Int, sizeY: Int): Game @aws_subscribe(mutations : ["deleteGame"])
  onDeletePattern(author: String, description: String, id: ID, sizeX: Int, sizeY: Int): Pattern @aws_subscribe(mutations : ["deletePattern"])
  onDeletePatternRating(comment: String, id: ID, rating: Int): PatternRating @aws_subscribe(mutations : ["deletePatternRating"])
  onDeleteUser(email: AWSEmail, id: ID, lastLogin: AWSDateTime, role: String, username: String): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateGame(generations: Int, id: ID, pattern: String, sizeX: Int, sizeY: Int): Game @aws_subscribe(mutations : ["updateGame"])
  onUpdatePattern(author: String, description: String, id: ID, sizeX: Int, sizeY: Int): Pattern @aws_subscribe(mutations : ["updatePattern"])
  onUpdatePatternRating(comment: String, id: ID, rating: Int): PatternRating @aws_subscribe(mutations : ["updatePatternRating"])
  onUpdateUser(email: AWSEmail, id: ID, lastLogin: AWSDateTime, role: String, username: String): User @aws_subscribe(mutations : ["updateUser"])
}

type User {
  email: AWSEmail
  id: ID!
  lastLogin: AWSDateTime
  role: String
  username: String
}

type UserConnection {
  items: [User]
  nextToken: String
}

input CreateGameInput {
  description: String
  generations: Int!
  pattern: String
  sizeX: Int!
  sizeY: Int!
}

input CreatePatternInput {
  author: String
  description: String
  heat: Int
  locked: Boolean
  name: String!
  pattern: String!
  sizeX: Int!
  sizeY: Int!
  type: String
  year: Int
}

input CreatePatternRatingInput {
  comment: String
  rating: Int
  userId: String
}

input CreateUserInput {
  email: AWSEmail
  id: ID!
  lastLogin: AWSDateTime
  role: String
  username: String
}

input DeleteGameInput {
  id: ID!
}

input DeletePatternInput {
  id: ID!
}

input DeletePatternRatingInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableGameFilterInput {
  description: TableStringFilterInput
  generations: TableIntFilterInput
  id: TableIDFilterInput
  pattern: TableStringFilterInput
  sizeX: TableIntFilterInput
  sizeY: TableIntFilterInput
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TablePatternFilterInput {
  author: TableStringFilterInput
  description: TableStringFilterInput
  heat: TableIntFilterInput
  id: TableIDFilterInput
  name: TableStringFilterInput
  pattern: TableStringFilterInput
  sizeX: TableIntFilterInput
  sizeY: TableIntFilterInput
  type: TableStringFilterInput
  year: TableIntFilterInput
}

input TablePatternRatingFilterInput {
  comment: TableStringFilterInput
  id: TableIDFilterInput
  patternId: TableStringFilterInput
  rating: TableIntFilterInput
  userId: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserFilterInput {
  email: TableStringFilterInput
  id: TableIDFilterInput
  lastLogin: TableStringFilterInput
  role: TableStringFilterInput
  username: TableStringFilterInput
}

input UpdateGameInput {
  description: String
  generations: Int
  id: ID!
  pattern: String
  sizeX: Int
  sizeY: Int
}

input UpdatePatternInput {
  author: String
  description: String
  heat: Int
  id: ID!
  locked: Boolean
  name: String
  pattern: String
  sizeX: Int
  sizeY: Int
  type: String
  year: Int
}

input UpdatePatternRatingInput {
  comment: String
  id: ID!
  rating: Int
}

input UpdateUserInput {
  email: AWSEmail
  id: ID!
  lastLogin: AWSDateTime
  role: String
  username: String
}
